---
title-block-banner: true
title: "R basics"
subtitle: "Coding group meeting #2"
abstract: > 
  Cover some important part of base R with an emphasis on programming aspects. 
author: "Alexandre Leblanc"
date: 2023-12-12
format: html
toc: true
toc-location: left
toc-depth: 2
number-sections: true
number-depth: 2

editor: visual
---

# General

Some general notes and tips about R and RStudio:

-   You can use `#` to comment a line
-   Case always matter in R
-   Semi-columns are not needed (but they can be used to replace return in code)
-   The number of spaces doesn't impact code, but you should indent your code properly
-   In RStudio, cutting and pasting code will indent it automatically
-   In RStudio, you can press ctrl-enter in a R script to run one line at a time into the console
-   In general, everything is ran in memory, you must save your data as .RData using the function `save` if you want to keep it, or export it in another file format (more on reading/saving files in subsequent coding group meeting).
-   You can use `View` on `data.frame` (tables) to inspect and manually filter data
-   Using a RStudio project, you can benefit of the relative paths to the folder. Definitions of functions are conventionally stored under a sub folder named `R` (its path would therefore be simply referred as `./R`).

# Data types

## Atomic vectors and basic data types

To create a vector assign one value to a variable using either `=` or `<-` (no `;` is required). Assigning will store the value without printing it to the console, you can always examine its content into the console by calling the variable name.

```{r}
x = 1
x <- 1
x
```

The use of the function `c` allow to define multiple element into the vector.

```{r}
z <- c(3,4,5)
```

Vectors (even with multiple elements) can only have one type, which is determined upon entering the values. The atomic (basic) data types are: `logical`, `integer`, `double`, `character`. Atomic types also encompass `complex` and `raw` but they are less commonly used. Character values can be defined using ' or ". Integer values can be specified with a `L` after the number if required, otherwise they will be double.

```{r}
x_logical <- TRUE
x_integer <- 1L
x_numeric <- 1
x_character <- "some string"
```

## Classes and conversion

The atomic types can be identified through the function `typeof`, but the function `class` function is more commonly used as it extend to higher structures than vectors. The class `numeric` encompass both `integer` and `double`, although the class `integer` also exist. The class of a variable can be tested using either `is` or the specific variants such as `is.numeric` or `is.integer`.

```{r}
x <- 1
typeof(x)
class(x)
is.numeric(x)
is.integer(x)

y <- 1L
typeof(y)
class(y)
is.numeric(y)
is.integer(y)
```

If variables of different classes are bound together, the class of the final vector would be the one of the more complex variable.

```{r}
#Initial variables
x <- "some string"
y <- 1.6
z <- 1L

#Binding variables and effect on class
b1 <- c(x,y)
class(b1)
b2 <- c(y,z)
class(b2)

#Explicitly redefining class
as.character(b2)  #Proper conversion
as.numeric(b1)    #Introduction of a missing value (NA)
as.integer(b2)    #Lost of a digit
```

## Other common base classes

#### Factors

The class `factors` represent categorical variables with possibles levels attached as attribute. They are useful in statistical analysis and plotting to consider categories that are missing in the data as well as manipulate their order. They can be created using the functions `factor` or `as.factor`, their levels are shown on console, but can be accessed using the function `levels`.

```{r}
#Simple use
x <- c("C", "B", "A", "B")
y <- factor(x)
y
levels(y)

#Specifying levels
x <- c("C", "B", "A", "B")
levels <- c("D","C","B","A")
y <- factor(x, levels = levels)
y
levels(y)

```

Some basic functions convert by default `character` to `factor`, which is unwanted when manipulating strings (more on this later).

#### Date and datetime

Datetime classes (`POSIXlt`/`POSIXct`) can be use to represent time (they differ in the way information is stored, but you don't need to worry about distinguishing them). Datetime can be created from `character` using `strptime` function. Looking at help of the function would inform on possible format to read, datetime is also associated to a timezone `tz`.

```{r}
x <- c("12/24/23 23:59:59")
y <- strptime(x, "%m/%d/%y %H:%M:%S", tz = "EST")
y
class(y)
```

The `Date` class can also be used if needed and is defined a similar way from `character`.

```{r}
x <- c("12/24/23")
y <- as.Date(x,"%m/%d/%y")
y
class(y)
```

# Data structures

## Matrix

More complex data structure are built on vectors. The class `matrix` organize a vector in rows and columns and make matrix operations available if its content is numeric (`array` also exist for higher dimensions).

```{r}
x <- c(1,2,3,4,5,6)
y <- matrix(x, nrow = 2, ncol = 3, byrow = TRUE)
y
class(y)
```

Although the variable is of class matrix, the class of its content is the one of the original vector, and this class must be unique (e.g. elements are all either `logical`, `integer`, `numeric`, `character`). For example, here we examine the class of the elements in the first column (more on selection later).

```{r}
class(y[,1]) 
```

## Data.frame

The class `data.frame` are tables with designated row and column dimension like matrices, but the class of columns (not rows) can differ.

```{r}
x <- c(1,2,3,4,5,6)
y <- c("A","B","C","D","E","F")
df <- data.frame(x = x, y = y)
class(df)
class(df$x)
class(df$y)
```

Note than for R version \< 4.0.0, the function `data.frame` converted `character` into `factor` by default. To prevent such conversion, one would have to specify :

```{r}
df <- data.frame(x = x, y = y , stringAsFactors = FALSE)
```

## List

The class `list` allows to store vector of different size, as well as other classes than vectors, including `list` itself.

```{r}
x <- c(1,2,3)
y <- c("A","B","C")
df <- data.frame(x = x, y = y)
some_list <- list(x = x, y = y, df = df)
some_list 
class(some_list)
class(some_list$x)
class(some_list$df)
```

## Assigning and accessing values

#### Vector

There are different way of reading or changing an element of vectors, matrix, data.frame, list. For vector, we can specify the element number using `\[`. It can be used to read as well as to rewrite the element.

```{r}
x <- c(1,2,3)
x[2] <- 4
x
y <- x[2]
y
```

Alternatively, one can provide a logical vector of the same size as the original vector for selection.

```{r}
x <- c(1,2,3)
selection <- c(FALSE, TRUE, FALSE)
x[selection] <- 4
x
y <- x[selection]
y
```

#### Matrix

For `matrix`, we can select using `\[`, but its non intuitive. We can alternatively specify rows and columns into `\[,\]`. Not specifying anything in one of the index would return the whole row or column

```{r}
x <- c(1,2,3,4,5,6)
y <- matrix(x, nrow = 2, ncol = 3)
y
y[2]
y[1,2]
y[,c(2,3)]
```

Note than if the selection reduce the matrix to one dimension, it will reduce automatically to a vector (which might or might not be desirable). To prevent this, one can specify drop = FALSE as an argument.

```{r}
x <- c(1,2,3,4,5,6)
y <- matrix(x, nrow = 2, ncol = 3)

y[,c(2,3)]
y[,3]
y[,3,drop = FALSE]
```

####Data.frame For `data.frame`, we can specify rows and columns using `\[,\]` and also use the `drop = FALSE` argument. We can also extract columns using `\$` or `\[\[ \]\]` and then select element in the vector if needed. Column name can be used instead of position and is the only option for `\$`.

```{r}
x <- c(1,2,3)
y <- c("A","B","C")
df <- data.frame(x = x, y = y)
df[,c("x"), drop = FALSE]
df[,1, drop = FALSE]
df[["x"]]
df$x
df$x[2]
```

#### List

For `list`, we can use either `\$` or `\[\[ \]\]` as with `data.frame` to extract an element. Using only `\[\]` would keep only the element selected but would preserve it as a `list`.

```{r}
x <- c(1,2,3)
y <- c("A","B","C")
df <- data.frame(x = x, y = y)
some_list <- list()
```

## Basic characteristics

#### Names, column and row names

One can also access names (to read or redefine) of `list` and vector using names and names of rows and columns of `data.frame` and `matrix` using `colnames` and `rownames`.

```{r}
x <- c(1,2,3,4,5,6)
y <- c("A","B","C","D","E","F")
df <- data.frame(x = x, y = y)
M <- matrix(x, 2, 3)

colnames(df) <- c("z", "w")
names(x) <- y
```

#### Dimension and length

Matrix and data.frame number of rows and columns can be obtain using the function dim, while the length of vectors and list can be accessed using the function `length`.

```{r}
x <- c(1,2,3,4,5,6)
length(x)

y <- c("A","B","C","D","E","F")
df <- data.frame(x = x, y = y)
dim(df)
```

Note that objects can have a defined class but be of length or dimension 0. For atomic vectors, they can be defined using `vector` to initialize a vector of length 0, or function such as `character(0)`. Both empty `matrix` and `data.frame` can be created by referring to empty vectors. Empty list can be defined using the function `list` with no argument.

```{r}
x <- vector(mode = "numeric", length = 0)
y <- character(0)
M <- matrix(x,0,0)
df <- data.frame(x=x,y=y)
empty_list <- list()
```

Another zero length object of interest is `NULL` (which can be tested with `is.null`). It is often use in functions with undefined value to return (the purpose of the function involve other actions).

# Useful functions

## Specific values

#### Missing value

Missing values are designated by NA and exist for the different classes. Missing elements can be identified using `is.na` function.

```{r}
x <- c(1, 2, NA)
is.na(x)

y <- c("A", "NA", NA)
is.na(y)
```

#### NaN and infinity

Some specific values may also be encountered for numeric variables, such as: `NaN` (not a number, i.e. not properly defined), `Inf` and `-Inf`. The class is `numeric` but the individual values can be identified using `is.infinite` or is `is.nan`.

```{r}
x <- c(-1,0,1)/0
is.infinite(x)
is.nan(x)
```

## Logical operators

Logical operators are: `&` (and), `|` (or), `!`(not), `==` (equal), `<` (less), `>` (greater), `<=` (less or equal), `>=` (greater or equal).

```{R}
x <- c(1,2,3,4,5)
logical_x <- (x == 1 | x > 3) & (x != 5)
logical_x
any(logical_x)  #Check if all elements are TRUE
all(logical_x)  #Check if any element is TRUE
```

One should be careful with `NA` as their behavior with `TRUE` or `FALSE` because, although being coherent, they make their identification more difficult (and are required in `if` statements). For one element, you can use `isTRUE` or `isFALSE` instead, otherwise `is.na` must be used to exclude `NA` cases.

```{R}
x <- c(TRUE,FALSE,NA)
y <- c(NA, NA, NA)
x&y
x|y
isTRUE(TRUE)
isTRUE(NA)
```

## Set and matching

Useful operation on sets include:

```{R}
x <- c("A","B","C")
y <- c("C","C","D","B")
union(x,y)      #Union of sets
intersect(x,y)  #Intersection of sets
is.element(x,y) #Inclusion (logical) 
x %in% y        #Equivalent to is.element
which(x %in% y) #Convert logical to position that are TRUE

match(x,y)      #Match the position of the first occurrence of y in x
unique(y)       #Return unique values

sort(y, decreasing = FALSE)  #Sort the values of the vector x
y_index <- order(y)          #Identify the position that lead to a sorted vector
y_index
y[y_index]
```

## Binding

In addition to the function `c` that bind vectors and `list` together, the function `rbind` and `cbind` allow binding rows and columns of `matrix` and `data.frame`.

```{R}
x1 <- 1:4 ; x2 <- 5:8; x3 <- 9:12 ; x4 <- 12:15
df1 <- data.frame(x1 = x1, x2 = x2); df2 <- data.frame(x3 = x3, x4 = x4)
cbind(df1, df2)
rbind(df1, df1)   #Must have the same column name
```

## Numeric vectors

#### Sequences

Typical function to create numeric vectors:

```{R}
x <- rep(1, length.out = 10)                #Repeat a value in a vector of desired length

x <- 1:10                                   #Integer sequence from 1 to 10
x <- seq(from = 1, to = 10, by = 2)         #Sequence with specified step
x <- seq(from = 1, to = 10, length.out = 3) #Sequence with specified length
y <- seq_along(x)                           #Sequence with length corresponding to another vector
```

#### Classic mathematical operators and functions

Basic mathematical operations, in addition to the typical `+`, `-`, `*`, `/`:

```{r}
#
x <- round(c(1.23456),digits = 2)  #Rounding with digit position
x <- floor(c(1.1))                 #Rounding to the integer down
x <- 5%%3                          #Modulo

x <- 1:5
sum(x)
mean(x)
var(x)
sqrt(x^2)
log(x, base = exp(1))
```

####Probability functions Distributions and random generating functions:

```{r}
sample(x = c("A","B","C"), size = 10, replace = TRUE) #Random sampling from set
rnorm(n=10,mean=0,sd=1)         #Generate random values from normal distribution (also check runif, rpois, rbinom)
pnorm(q = -3:3, mean=0, sd=1)   #Cumulative density distribution of normal distribution (also check dnorm, qnorm)
```

## String manipulation

The functions `grepl` and `gsub` allows pattern matching; they are useful but one should check a cheatsheet for possible expressions (e.g. \^ designate the start of a string, and \$ its end). The package `stringr` also provide (similar) functions on string operations.

```{R}
x <- c("A first string", "A second string", "third string A")
grepl(pattern = "FIRST", x = x, ignore.case = TRUE) #Check if elements contain pattern (see grep for position)
grepl(pattern = "^A", x)
grepl(pattern = "A$", x)
gsub(pattern = " ", replacement = "_", x = x)
```

Functions to divide and concatenate strings are useful, in particular `paste0` The vectors `letters` and `LETTERS` contains the alphabet and are convenient to create generic strings.

```{R}
nchar(x)                         #Identify the number of characters
substr(x,start=1,stop=5)         #Select a number of character

paste0(letters[1:3],LETTERS[1:3]) #Element-wise concatenate (see also paste)
paste0(letters[1:3],LETTERS[1:3], collapse = "-") #Also concatenate the resulting string
```

## Operations on matrix

```{R}
M <- matrix(c(1,2,-1,3),2,2)
M
t(M)             #Transpose
t(M) %*% M       #Matrix multiplication
M*M              #Hadamard product
diag(c(1,1,1))   #Diagonal matrix
det(M)           #Determinant
solve(M)         #Matrix inverse

```

# Function

## Packages: using existing functions

Functions in R come in group as packages (usually built around a same thematic and well documented). Several packages come already with R (e.g. `base`, `utils`, `stats`) but others must be installed (once) using the `install.packages` function, or in RStudio, select Tools \> Install Packages. Every additional packages must then be loaded at the beginning of every session with the function`library`.

```{r}
#| error: true
#| output: false
#| echo: false
install.packages("dplyr")
library("dplyr")
```

Functions can be call from specific packages using the `::`operator. This is useful when two package might share the same function name, e.g. `plyr::summarise` and `dplyr::summarise`. It also make a function available with the need to load it first with `library`. Under RStudio, specifying the package and `::` will list possible functions associated to the package.

To obtain help on a function, you can use the `?`symbol under RStudio (e.g. `?mean`). The example section is particularly useful to see the function in action.

```{r}
?mean
```

## Using functions

When calling function, you can specify values to arguments based on position in the function, but it is safer to explicitly deine them with `=`; in the latter case, order of arguments would not impact the results. Also, the `<-` should not be used instead of `=` for specifying arguments; it would assigns a value outside the function call statement and specify its arguments based on position.

```{r}
x <- 1:3
mean(4:6, 0)             #Based on position (see usage section of function documentation)
mean(x = 4:6, trim = 0)  #Explicit (order does not matter)
mean(trim = 0, x = 4:6)
x                        #x not changed
mean(x <- 4:6)           #do not use <-
x                        #x was changed
```

The function `do.call` allows to call a function with a name to be passed as `character` and its arguments as a `list`. This is useful to produce more generic functions when the function name is not known already.

```{r}
do.call("mean", args = list(x = c(1:13), trim = 0))
```
Another use is to pass long arguments or arguments with size that are still undefined when doing the call.
```{r}
M <- matrix(1:4,2,2)
M_to_bind <- list(M1=M, M2=M, M3=M)
do.call("rbind", args = M_to_bind)
```
## Creating functions

Functions can be defined with statements like follow. Here, the function `addition` have `x` and `y` as arguments, with `y = 1` the default option (if no `y` is provided).

```{r}
#Definition
addition <- function(x, y = 1){
  new_variable <- x + y
  x <- 20
  return(new_variable)
}
#Use
x = 1
y = 2
addition(x = x, y = y)
addition(x = x)
```

Note that the scope of all variables in the function definition is restricted to the function environment (i.e. local), unless specified otherwise. The value of `new_variable` is returned and assigned to the variable specified in calling environment (here `z`). The variable `x` remain unchanged where the function was called, and the `new_variable` doesn't exist.

```{r}
#| error: true
x
new_variable
```

While defining function, one can also specify default values and pass additional arguments using `...`. In the following example, we create a function to return directly the value of identified in `grepl`. The `...` here correspond to values to be passed (if needed) to `grepl`.

```{r}
#Definition
grep_value <- function(x, pattern, ...){
  logical_pattern <- grepl(pattern = pattern, x = x, ...)
  z <- x[logical_pattern]
  return(z)
}
#Use
grep_value(x = c("ABC", "BAC", "cab"), pattern = "AB", ignore.case = TRUE)
```

In this situation, we could have directly included `ignore.case` as an argument of `grep_value`, but in some case functions are to be specified and their arguments are unknown.

## Loading function

Functions can be defined in the header of the file to be used, but it is more manageable to define only one function per file. To load your function, the best solution (not covered here) would be to regroup them into a package and load it using `library`. A simpler alternative is to run the file using the function `source` to load it in your global environment (the one you are typing). If all functions are in the same folder, it is easy to iteratively source them all.

# Conditional and iterative statements
## If-else

Conditional statement take as an argument in parenthesis a vector of length 1 that is either `TRUE` or`FALSE` (not `NA`) and execute the code in `{}` if `TRUE`. If `FALSE`, the `else if` (there can be several ones) and `else` statements are checked in order if defined (they are optional) until one of the condition is met.

```{r}
#The statement
x <- "B"
if(x == "A"){
  y <- 1
}else if(x == "B"){
  y <- 2
}else{
  y <- 3
}
#The result
y

```

## For loop

Repeating a block of code over a known number of iteration can be achieved using the `for` statement. The part in parenthesis specify that `i` must take values of `1` to `5`, and execute for each value (in order) the code in `{}`. It is a best practice to define a vector of results with proper length before the for loop and assign results rather than concatenating the answer at every step.

```{r}
#Definitions
x <- seq(0,50,10)
y <- 1:5
sum_xy <- vector("numeric",length = 5)

#The for loop
for (i in 1:5){             #seq_along would be better here
 sum_xy[i] <- x[i] + y[i]
}

#The result
sum_xy
```

## While loop

Similarly, for unknown number of iterations, the `while` statement would execute the block of code in `{}` as long as the condition in parenthesis is met when beginning the iteration.

```{r}
x <- seq(0,50,10)
y <- 1:5
sum_xy <- vector("numeric",length = 5)
i <- 1
while (i <= 5) {
 sum_xy[i] <- x[i] + y[i]
 i <- i + 1
}

#The result
sum_xy
```
